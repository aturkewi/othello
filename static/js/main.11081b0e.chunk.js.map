{"version":3,"sources":["components/Cell.jsx","components/Row.jsx","components/GameBoard.jsx","components/GameContainer.jsx","App.js","serviceWorker.js","index.js"],"names":["Cell","playerId","row","column","makeMove","className","onClick","Row","data","map","i","key","GameBoard","board","GameContainer","createBoard","j","push","useState","currentPlayerId","setState","startGame","newBoard","nextPlayer","getLocation","rowIndex","columnIndex","flipDirecrtions","getAllFlippableCells","reduce","flippableCells","shiftDirections","concat","rowStart","columnStart","rowShift","columnShift","currentCellOwner","offset","flipableCells","getFlippableCellsForDirection","validMove","acc","location","isAdjacent","length","checkForFlips","forEach","flip","useEffect","score","1","2","stillPlaying","cell","winner","alert","endGame","App","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.11081b0e.chunk.js","sourcesContent":["import React from 'react'\n\nfunction Cell({ playerId, row, column, makeMove }) {\n  return(\n    <div className={`cell player${playerId}`} onClick={() => makeMove(row, column)}>\n\n    </div>\n  )\n}\n\nexport default Cell\n","import React from 'react'\nimport Cell from './Cell'\n\nfunction Row({ data, row, makeMove }) {\n  return(\n    <div className=\"row\">\n      {data.map( (playerId, i) => (\n        <Cell key={i} column={i} row={row} makeMove={makeMove} playerId={playerId} />\n      ))}\n    </div>\n  )\n}\n\nexport default Row\n","import React from 'react'\nimport Row from './Row'\n\nfunction GameBoard({board, makeMove}) {\n  return(\n    <div className=\"board\">\n      {board.map((row, i) => <Row key={i} row={i} makeMove={makeMove} data={row} />)}\n    </div>\n  )\n}\n\nexport default GameBoard\n","import React, {useState, useEffect} from 'react'\nimport GameBoard from './GameBoard'\n\nfunction GameContainer() {\n  const createBoard = () => {\n    const board = []\n    for(let i=0; i < 8; i++){\n      board[i] = []\n      for(let j=0; j < 8; j++){\n        board[i].push(0)\n      }\n    }\n    return board\n  }\n  const defaultState = () => ({\n    currentPlayerId: 0,\n    board: createBoard()\n  })\n  const [{currentPlayerId, board}, setState] = useState(defaultState())\n\n  const startGame = () => {\n    const newBoard = createBoard()\n\n    newBoard[3][3] = 1\n    newBoard[4][4] = 1\n    newBoard[3][4] = 2\n    newBoard[4][3] = 2\n    setState({board: newBoard, currentPlayerId: 1})\n  }\n\n  const nextPlayer = () => {\n    if(currentPlayerId === 1){\n      return 2\n    }else{\n      return 1\n    }\n  }\n\n  const getLocation = (rowIndex, columnIndex) => {\n    const row = board[rowIndex]\n    if(row){\n      return row[columnIndex]\n    }\n  }\n\n  const flipDirecrtions = [\n    [1, 0], // down\n    [-1, 0], // up\n    [0, 1], // right\n    [0, -1], // left\n    [1, 1], // down and to the right\n    [1, -1], // up and to the right\n    [-1, 1], // down and to the left\n    [-1, -1] // up and to the left\n  ]\n\n  const isAdjacent = (row, column) => (\n    flipDirecrtions.reduce((acc, shiftDirections) => {\n      const location = getLocation(row + shiftDirections[0], column + shiftDirections[1])\n      const taken = (location === 1) || (location === 2)\n      return acc || taken\n    }, false)\n  )\n\n  const getFlippableCellsForDirection = (rowStart, columnStart, rowShift, columnShift) => {\n    let currentCellOwner = getLocation(rowStart + rowShift, columnStart + columnShift) // nextPlayer()\n    let offset = 1\n    while(currentCellOwner === nextPlayer()) {\n      currentCellOwner = getLocation(rowStart + offset * rowShift, columnStart  + offset * columnShift)\n      offset++\n    }\n\n    if(offset === 1){\n      return []\n    }\n\n    if(currentCellOwner === currentPlayerId){\n      const flipableCells = []\n      for(let i=1; i < offset; i++){\n        flipableCells.push([rowStart + i * rowShift, columnStart + i * columnShift])\n        // board[rowStart + i * rowShift][columnStart + i * columnShift] = currentPlayerId\n      }\n      return flipableCells\n    }else{\n      return []\n    }\n\n  }\n\n  const getAllFlippableCells = (row, column) => {\n    return flipDirecrtions.reduce( (flippableCells, shiftDirections) => (\n      flippableCells\n        .concat(getFlippableCellsForDirection(row, column, shiftDirections[0], shiftDirections[1]))\n    ), [])\n  }\n\n  const validMove = (row, column) => {\n    // is space free?\n    if(board[row][column] !== 0){\n      return false\n    }\n\n    // Is it next to something?\n    if(!isAdjacent(row, column)){\n      return false\n    }\n\n    // are there flippable cells?\n    const cellsToFlip = getAllFlippableCells(row, column)\n    if(cellsToFlip.length == 0){\n      return false\n    }else {\n      return true\n    }\n  }\n\n  const flip = (rowStart, columnStart, rowShift, columnShift) => {\n    let currentCellOwner = nextPlayer()\n    let offset = 1\n    while(currentCellOwner === nextPlayer()) {\n      currentCellOwner = getLocation(rowStart + offset * rowShift, columnStart  + offset * columnShift)\n      offset++\n    }\n    if(currentCellOwner === currentPlayerId){\n      for(let i=1; i < offset; i++){\n        board[rowStart + i * rowShift][columnStart + i * columnShift] = currentPlayerId\n      }\n    }\n  }\n\n  const checkForFlips = (row, column) => {\n    flipDirecrtions.forEach( shiftDirections => {\n      flip(row, column, shiftDirections[0], shiftDirections[1])\n    })\n  }\n\n  const endGame = (score) => {\n    let winner\n    if (score[1] > score[2]) {\n      winner = 1\n    }else {\n      winner = 2\n    }\n    alert(`The winner is player${winner}! Final score: \\n Player1: ${score[1]} \\n Player2: ${score[2]}`)\n  }\n\n  const checkEndGame = () => {\n    const score = {1: 0, 2: 0}\n    let stillPlaying = false\n    board.forEach( row => {\n      row.forEach( cell => {\n        if(cell === 0){\n          stillPlaying = true\n        }\n        score[cell]++\n      })\n    })\n    if(!stillPlaying){\n      endGame(score)\n    }\n  }\n\n  useEffect(checkEndGame)\n\n  const makeMove = (row, column) => {\n    // confirm valid move, alert otherwise\n    if(!validMove(row, column)){\n      alert(\"This is not a valid move!\")\n      return\n    }\n    // update that square\n    board[row][column] = currentPlayerId\n    // check for flips and flip\n    checkForFlips(row, column)\n\n    // update state\n    setState({board: board, currentPlayerId: nextPlayer()})\n  }\n\n  return (\n    <div>\n      <div className=\"column\">\n        <div className={`cell player${currentPlayerId}`}>.</div>\n        <p>\n          {currentPlayerId ? `It is player ${currentPlayerId}'s turn` : ''}\n        </p>\n      </div>\n      <p>\n        {currentPlayerId === 0 ?\n          <button onClick={startGame}>Start Game</button>\n          :\n          ''\n        }\n      </p>\n      <GameBoard board={board} makeMove={makeMove}/>\n      <p>\n        {currentPlayerId !== 0 ?\n          <button onClick={startGame}>Restart Game</button>\n          :\n          ''\n        }\n      </p>\n    </div>\n  );\n}\n\nexport default GameContainer;\n","import React from 'react';\nimport './App.css';\nimport GameContainer from './components/GameContainer'\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <h1>Welcome to othello</h1>\n      <GameContainer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}